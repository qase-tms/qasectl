// Code generated by MockGen. DO NOT EDIT.
// Source: run.go
//
// Generated by this command:
//
//	mockgen -source=run.go -destination=/Users/gda/Documents/github/qase-tms/qasectl/internal/service/run/mocks/run.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	run "github.com/qase-tms/qasectl/internal/models/run"
	gomock "go.uber.org/mock/gomock"
)

// Mockclient is a mock of client interface.
type Mockclient struct {
	ctrl     *gomock.Controller
	recorder *MockclientMockRecorder
}

// MockclientMockRecorder is the mock recorder for Mockclient.
type MockclientMockRecorder struct {
	mock *Mockclient
}

// NewMockclient creates a new mock instance.
func NewMockclient(ctrl *gomock.Controller) *Mockclient {
	mock := &Mockclient{ctrl: ctrl}
	mock.recorder = &MockclientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockclient) EXPECT() *MockclientMockRecorder {
	return m.recorder
}

// CompleteRun mocks base method.
func (m *Mockclient) CompleteRun(ctx context.Context, projectCode string, runId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteRun", ctx, projectCode, runId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteRun indicates an expected call of CompleteRun.
func (mr *MockclientMockRecorder) CompleteRun(ctx, projectCode, runId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteRun", reflect.TypeOf((*Mockclient)(nil).CompleteRun), ctx, projectCode, runId)
}

// CreateRun mocks base method.
func (m *Mockclient) CreateRun(ctx context.Context, projectCode, title, description string, envID, mileID, planID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRun", ctx, projectCode, title, description, envID, mileID, planID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRun indicates an expected call of CreateRun.
func (mr *MockclientMockRecorder) CreateRun(ctx, projectCode, title, description, envID, mileID, planID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRun", reflect.TypeOf((*Mockclient)(nil).CreateRun), ctx, projectCode, title, description, envID, mileID, planID)
}

// GetEnvironments mocks base method.
func (m *Mockclient) GetEnvironments(ctx context.Context, projectCode string) ([]run.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironments", ctx, projectCode)
	ret0, _ := ret[0].([]run.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironments indicates an expected call of GetEnvironments.
func (mr *MockclientMockRecorder) GetEnvironments(ctx, projectCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironments", reflect.TypeOf((*Mockclient)(nil).GetEnvironments), ctx, projectCode)
}

// GetMilestones mocks base method.
func (m *Mockclient) GetMilestones(ctx context.Context, projectCode, milestoneName string) ([]run.Milestone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMilestones", ctx, projectCode, milestoneName)
	ret0, _ := ret[0].([]run.Milestone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMilestones indicates an expected call of GetMilestones.
func (mr *MockclientMockRecorder) GetMilestones(ctx, projectCode, milestoneName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMilestones", reflect.TypeOf((*Mockclient)(nil).GetMilestones), ctx, projectCode, milestoneName)
}

// GetPlans mocks base method.
func (m *Mockclient) GetPlans(ctx context.Context, projectCode string) ([]run.Plan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlans", ctx, projectCode)
	ret0, _ := ret[0].([]run.Plan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlans indicates an expected call of GetPlans.
func (mr *MockclientMockRecorder) GetPlans(ctx, projectCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlans", reflect.TypeOf((*Mockclient)(nil).GetPlans), ctx, projectCode)
}
