// Code generated by MockGen. DO NOT EDIT.
// Source: filter.go
//
// Generated by this command:
//
//	mockgen -source=filter.go -destination=/Users/gda/Documents/github/qase-tms/qasectl/internal/service/filter/mocks/filter.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	plan "github.com/qase-tms/qasectl/internal/models/plan"
	gomock "go.uber.org/mock/gomock"
)

// Mockclient is a mock of client interface.
type Mockclient struct {
	ctrl     *gomock.Controller
	recorder *MockclientMockRecorder
}

// MockclientMockRecorder is the mock recorder for Mockclient.
type MockclientMockRecorder struct {
	mock *Mockclient
}

// NewMockclient creates a new mock instance.
func NewMockclient(ctrl *gomock.Controller) *Mockclient {
	mock := &Mockclient{ctrl: ctrl}
	mock.recorder = &MockclientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockclient) EXPECT() *MockclientMockRecorder {
	return m.recorder
}

// GetPlan mocks base method.
func (m *Mockclient) GetPlan(ctx context.Context, projectCode string, planID int64) (plan.PlanDetailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlan", ctx, projectCode, planID)
	ret0, _ := ret[0].(plan.PlanDetailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlan indicates an expected call of GetPlan.
func (mr *MockclientMockRecorder) GetPlan(ctx, projectCode, planID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlan", reflect.TypeOf((*Mockclient)(nil).GetPlan), ctx, projectCode, planID)
}
